@use "sass:map";

@use "functions" as *;
@use "../vars/breakpoints" as *;
@use "../vars/themes" as *;

@mixin set-themes($default: dark) {
  @each $name, $theme in $themes {
    $shaded: shade($theme);

    html[data-theme="#{$name}"] {
      @each $key, $val in $shaded {
        --#{$key}: #{$val};
      }
    }

    @if $name == $default {
      :root {
        @each $key, $val in $shaded {
          --#{$key}: #{$val};
        }
      }
    }
  }
}

// ---------------------------------------------------------------- //

@mixin breakpoint-up($size) {
  @media (min-width: map.get($breakpoints, $size)) {
    @content;
  }
}

@mixin breakpoint-only($size) {
  @media (min-width: map.get($breakpoints, $size)) and (max-width: (map.get($breakpoints, $size) - .015625rem)) {
    @content;
  }
}

@mixin breakpoint-down($size) {
  @media (max-width: (map.get($breakpoints, $size) - .015625rem)) {
    @content;
  }
}

// ---------------------------------------------------------------- //

@mixin hover-focus {
  &:hover,
  &:focus,
  &:focus-visible {
    @content;
  }
}

@mixin touch-device {
  @media (hover: none) and (pointer: coarse) {
    @content;
  }
}

// ---------------------------------------------------------------- //

@mixin shimmer($hover, $color: var(--shimmer-color)) {
  & {
    position: relative;
    overflow: hidden;
  }

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -50%;
    width: 100%;
    height: 100%;
    pointer-events: none;
    background: linear-gradient(
        115deg,
        transparent 0%,
        $color 50%,
        transparent 100%
    );
    transform: skewX(-15deg);
    transition: left .5s ease-in-out;
  }

  @if ($hover == true) {
    @include hover-focus {
      & {
        transition: background-color .15s ease-in-out;
      }

      &::before {
        left: 110%;
        transition: left .5s ease-in-out;
      }
    }
  }
}
